(dp1
S'output'
p2
S'missing "pass" in view'
p3
sS'layer'
p4
S'ParserContainer'
p5
sS'code'
p6
S'response.write(\'<!DOCTYPE html>\\r\\n<!--[if (gt IE 9)|!(IE)]><!--> <html class="no-js" lang="\', escape=False)\nresponse.write(T.accepted_language or \'en\')\nresponse.write(\'"> <!--<![endif]-->\\r\\n  <head>\\r\\n    <meta charset="utf-8">\\r\\n    <!-- www.phpied.com/conditional-comments-block-downloads/ -->\\r\\n    <!-- Always force latest IE rendering engine\\r\\n         (even in intranet) & Chrome Frame\\r\\n         Remove this if you use the .htaccess -->\\r\\n    <meta http-equiv="X-UA-Compatible" content="IE=edge\', escape=False)\nresponse.write(not request.is_local and \',chrome=1\' or \'\')\nresponse.write(\'">\\r\\n    <!--  Mobile Viewport Fix\\r\\n          j.mp/mobileviewport & davidbcalhoun.com/2010/viewport-metatag\\r\\n          device-width: Occupy full width of the screen in its current orientation\\r\\n          initial-scale = 1.0 retains dimensions instead of zooming out if page height > device height\\r\\n          user-scalable = yes allows the user to zoom in -->\\r\\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\\r\\n    <title>\', escape=False)\nresponse.write(response.title or request.application)\nresponse.write(\'</title>\\r\\n    <!-- http://dev.w3.org/html5/markup/meta.name.html -->\\r\\n    <meta name="application-name" content="\', escape=False)\nresponse.write(request.application)\nresponse.write(\'">\\r\\n    <!-- Speaking of Google, don\\\'t forget to set your site up:\\r\\n         http://google.com/webmasters -->\\r\\n    <meta name="google-site-verification" content="">\\r\\n    <!-- include stylesheets -->\\r\\n    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"/>\\r\\n    <link rel="stylesheet" href="\', escape=False)\nresponse.write(URL(\'static\',\'css/bootstrap.min.css\'))\nresponse.write(\'"/>\\r\\n    <link rel="stylesheet" href="\', escape=False)\nresponse.write(URL(\'static\',\'css/web2py-bootstrap4.css\'))\nresponse.write(\'"/>\\r\\n    <link rel="shortcut icon" href="\', escape=False)\nresponse.write(URL(\'static\',\'images/favicon.ico\'))\nresponse.write(\'" type="image/x-icon">\\r\\n    <link rel="apple-touch-icon" href="\', escape=False)\nresponse.write(URL(\'static\',\'images/favicon.png\'))\nresponse.write(\'">\\r\\n    <!-- All JavaScript at the bottom, except for Modernizr which enables\\r\\n         HTML5 elements & feature detects -->\\r\\n    <script src="\', escape=False)\nresponse.write(URL(\'static\',\'js/modernizr-2.8.3.min.js\'))\nresponse.write(\'"></script>\\r\\n    <!-- Favicons -->\\r\\n    \', escape=False)\nresponse.write(\'<script type="text/javascript"><!--\\n    // These variables are used by the web2py_ajax_init function in web2py_ajax.js (which is loaded below).\\n    \', escape=False)\nresponse.write(ASSIGNJS(\nw2p_ajax_confirm_message = T(\'Are you sure you want to delete this object?\'),\nw2p_ajax_disable_with_message = T(\'Working...\'),\nw2p_ajax_date_format = T(\'%Y-%m-%d\'),\nw2p_ajax_datetime_format = T(\'%Y-%m-%d %H:%M:%S\'),\najax_error_500 = T.M(\'An error occured, please [[reload %s]] the page\') % URL(args=request.args, vars=request.get_vars)\n))\nresponse.write(\'\\n    //--></script>\\n\', escape=False)\nresponse.files.insert(0,URL(\'static\',\'js/jquery.js\'))\nresponse.files.insert(1,URL(\'static\',\'css/calendar.css\'))\nresponse.files.insert(2,URL(\'static\',\'js/calendar.js\'))\nresponse.files.insert(3,URL(\'static\',\'js/web2py.js\'))\nresponse.include_meta()\nresponse.include_files()\nresponse.write(\'\\n\', escape=False)\nresponse.write(\' <!-- this includes jquery.js, calendar.js/.css and web2py.js -->\\r\\n    \', escape=False)\nresponse.write(\'\\r\\n  </head>\\r\\n  <body>\\r\\n    <div class="w2p_flash alert alert-dismissable">\', escape=False)\nresponse.write(response.flash or \'\')\nresponse.write(\'</div>\\r\\n    <!-- Navbar ======================================= -->\\r\\n    <nav class="navbar navbar-light navbar-expand-md bg-faded bg-dark navbar-dark justify-content-center">\\r\\n       <a href="/myapp" class="navbar-brand d-flex w-50 mr-auto">pixel</a>\\r\\n       <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">\\r\\n         <span class="navbar-toggler-icon"></span>\\r\\n       </button>\\r\\n       <div class="navbar-collapse collapse w-100" id="navbarNavDropdown">\\r\\n         <ul class="navbar-nav w-100 justify-content-center">\\r\\n          \', escape=False)\nfor _item in response.menu or []:\n    response.write(\'\\r\\n          \', escape=False)\n    if len(_item)<4 or not _item[3]:\n        response.write(\'\\r\\n          <li class="nav-item \', escape=False)\n        if _item[1]:\n            response.write(\'active\', escape=False)\n            pass\n        response.write(\'">\\r\\n            <a class="nav-link" href="\', escape=False)\n        response.write(_item[2])\n        response.write(\'">\', escape=False)\n        response.write(_item[0])\n        response.write(\'</a>\\r\\n          </li>\\r\\n          \', escape=False)\n    else:\n        response.write(\'\\r\\n          <li class="nav-item dropdown">\\r\\n            <a class="nav-link dropdown-toggle" href="\', escape=False)\n        response.write(_item[2])\n        response.write(\'" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\', escape=False)\n        response.write(_item[0])\n        response.write(\'</a>\\r\\n            <div class="dropdown-menu">\\r\\n              \', escape=False)\n        for _subitem in _item[3]:\n            response.write(\'\\r\\n              <a class="dropdown-item" href="\', escape=False)\n            response.write(_subitem[2])\n            response.write(\'">\', escape=False)\n            response.write(_subitem[0])\n            response.write(\'</a>\\r\\n              \', escape=False)\n            pass\n        response.write(\'\\r\\n            </div>\\r\\n          </li>\\r\\n          \', escape=False)\n        pass\n    response.write(\'\\r\\n          \', escape=False)\n    pass\nresponse.write(\'\\r\\n        </ul>\\r\\n         <!--<form class="form-inline my-2 my-lg-0">\\r\\n             <input class="form-control mr-sm-2" type="text" placeholder="Search">\\r\\n         </form>-->\\r\\n        \', escape=False)\nif \'auth\' in globals():\n    response.write(\'\\r\\n        <ul class="nav navbar-nav ml-auto w-100 justify-content-end">\\r\\n          <li class="nav-item dropdown">\\r\\n            <a class="nav-link dropdown-toggle" href="#" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\\r\\n              \', escape=False)\n    if auth.user:\n        response.write(auth.user.first_name)\n    else:\n        response.write(\'LOGIN\', escape=False)\n        pass\n    response.write(\'\\r\\n            </a>\\r\\n            <div class="dropdown-menu dropdown-menu-right">\\r\\n              \', escape=False)\n    if auth.user:\n        response.write(\'\\r\\n              <a class="dropdown-item" href="\', escape=False)\n        response.write(URL(\'default\',\'user/profile\'))\n        response.write(\'">\', escape=False)\n        response.write(T(\'Profile\'))\n        response.write(\'</a>\\r\\n              \', escape=False)\n        if \'change_password\' not in auth.settings.actions_disabled:\n            response.write(\'\\r\\n              <a class="dropdown-item" href="\', escape=False)\n            response.write(URL(\'default\',\'user/change_password\'))\n            response.write(\'">\', escape=False)\n            response.write(T(\'Change Password\'))\n            response.write(\'</a>\\r\\n              \', escape=False)\n            pass\n        response.write(\'\\r\\n              <a class="dropdown-item" href="\', escape=False)\n        response.write(URL(\'default\',\'user/logout\'))\n        response.write(\'">\', escape=False)\n        response.write(T(\'Logout\'))\n        response.write(\'</a>\\r\\n              \', escape=False)\n    else:\n        response.write(\'\\r\\n              <a class="dropdown-item" href="\', escape=False)\n        response.write(URL(\'default\',\'user/login\'))\n        response.write(\'">\', escape=False)\n        response.write(T(\'Login\'))\n        response.write(\'</a>\\r\\n              \', escape=False)\n        if \'register\' not in auth.settings.actions_disabled:\n            response.write(\'\\r\\n              <a class="dropdown-item" href="\', escape=False)\n            response.write(URL(\'default\',\'user/register\'))\n            response.write(\'">\', escape=False)\n            response.write(T(\'Sign up\'))\n            response.write(\'</a>\\r\\n              \', escape=False)\n            pass\n        response.write(\'\\r\\n              \', escape=False)\n        if \'retrieve_password\' not in auth.settings.actions_disabled:\n            response.write(\'\\r\\n              <a class="dropdown-item" href="\', escape=False)\n            response.write(URL(\'default\',\'user/retrieve_password\'))\n            response.write(\'">\', escape=False)\n            response.write(T(\'Lost Password\'))\n            response.write(\'</a>\\r\\n              \', escape=False)\n            pass\n        response.write(\'\\r\\n              \', escape=False)\n        pass\n    response.write(\'\\r\\n            </div>\\r\\n          </li>\\r\\n        </ul>\\r\\n        \', escape=False)\n    pass\nresponse.write(\'\\r\\n      </div>\\r\\n    </nav>\\r\\n\\r\\n    <!-- Masthead ===================================== -->\\r\\n    \', escape=False)\nresponse.write(\'\\r\\n    \', escape=False)\nresponse.write(\'\\r\\n    <!-- Main ========================================= -->\\r\\n    <!-- Begin page content -->\\r\\n    <div class="container-fluid main-container">\\r\\n      \', escape=False)\nresponse.write(\'\\r\\n<script><!--\\r\\n    jQuery(document).ready(function(){\\r\\n    jQuery("table.sortable tbody tr").mouseover( function() {\\r\\n    jQuery(this).addClass("highlight"); }).mouseout( function() {\\r\\n    jQuery(this).removeClass("highlight"); });\\r\\n    jQuery(\\\'table.sortable tbody tr:odd\\\').addClass(\\\'odd\\\');\\r\\n    jQuery(\\\'table.sortable tbody tr:even\\\').addClass(\\\'even\\\');\\r\\n});\\r\\n//--></script>\\r\\n\\r\\n<div class="row">\\r\\n  <div class="col-md-12">\\r\\n\\r\\n\', escape=False)\nif request.function==\'index\':\n    response.write(\'\\r\\n<h2>\', escape=False)\n    response.write(T("Available Databases and Tables"))\n    response.write(\'</h2>\\r\\n  \', escape=False)\n    if not databases:\n        response.write(T("No databases in this application"))\n        pass\n    response.write(\'\\r\\n  <ul class="nav nav-tabs" id="myTab">\\r\\n    <li class="nav-item"><a href="#alltables" data-toggle="tab" class="nav-link active">Tables</a></li>\\r\\n    <li class="nav-item"><a href="#hooks" data-toggle="tab" class="nav-link">Hooks</a></li>\\r\\n  </ul>\\r\\n  <div class="tab-content">\\r\\n      <div class="tab-pane active" id="alltables">\\r\\n        <table class="table table-striped">\\r\\n          \', escape=False)\n    for db in sorted(databases):\n        response.write(\'\\r\\n            \', escape=False)\n        for table in databases[db].tables:\n            response.write(\'\\r\\n              \', escape=False)\n            qry=\'%s.%s.id>0\'%(db,table)\n            response.write(\'\\r\\n              \', escape=False)\n            tbl=databases[db][table]\n            response.write(\'\\r\\n              \', escape=False)\n            if hasattr(tbl,\'_primarykey\'):\n                response.write(\'\\r\\n                \', escape=False)\n                if tbl._primarykey:\n                    response.write(\'\\r\\n                    \', escape=False)\n                    firstkey=tbl[tbl._primarykey[0]]\n                    response.write(\'\\r\\n                    \', escape=False)\n                    if firstkey.type in [\'string\',\'text\']:\n                        response.write(\'\\r\\n                      \', escape=False)\n                        qry=\'%s.%s.%s!=""\'%(db,table,firstkey.name)\n                        response.write(\'\\r\\n                    \', escape=False)\n                    else:\n                        response.write(\'\\r\\n                      \', escape=False)\n                        qry=\'%s.%s.%s>0\'%(db,table,firstkey.name)\n                        response.write(\'\\r\\n                    \', escape=False)\n                        pass\n                    response.write(\'\\r\\n                \', escape=False)\n                else:\n                    response.write(\'\\r\\n                     \', escape=False)\n                    qry=\'\'\n                    response.write(\'\\r\\n                \', escape=False)\n                    pass\n                response.write(\'\\r\\n              \', escape=False)\n                pass\n            response.write(\'\\r\\n            \\r\\n            \', escape=False)\n            for db in sorted(databases):\n                response.write(\'\\r\\n            \', escape=False)\n                for table in databases[db].tables:\n                    response.write(\'\\r\\n              \', escape=False)\n                    qry=\'%s.%s.id>0\'%(db,table)\n                    response.write(\'\\r\\n              \', escape=False)\n                    tbl=databases[db][table]\n                    response.write(\'\\r\\n              \', escape=False)\n                    if hasattr(tbl,\'_primarykey\'):\n                        response.write(\'\\r\\n                \', escape=False)\n                        if tbl._primarykey:\n                            response.write(\'\\r\\n                    \', escape=False)\n                            firstkey=tbl[tbl._primarykey[0]]\n                            response.write(\'\\r\\n                    \', escape=False)\n                            if firstkey.type in [\'string\',\'text\']:\n                                response.write(\'\\r\\n                      \', escape=False)\n                                qry=\'%s.%s.%s!=""\'%(db,table,firstkey.name)\n                                response.write(\'\\r\\n                    \', escape=False)\n                            else:\n                                response.write(\'\\r\\n                      \', escape=False)\n                                qry=\'%s.%s.%s>0\'%(db,table,firstkey.name)\n                                response.write(\'\\r\\n                    \', escape=False)\n                                pass\n                            response.write(\'\\r\\n                \', escape=False)\n                        else:\n                            response.write(\'\\r\\n                     \', escape=False)\n                            qry=\'\'\n                            response.write(\'\\r\\n                \', escape=False)\n                            pass\n                        response.write(\'\\r\\n              \', escape=False)\n                        pass\n                    response.write(\'\\r\\n          <tr>\\r\\n            <th style="font-size: 1.75em;">\\r\\n              &raquo; \', escape=False)\n                    response.write(A("%s.%s" % (db,table),_href=URL(\'select\',args=[db],vars=dict(query=qry))))\n                    response.write(\'\\r\\n            </th>\\r\\n            <td>\\r\\n              \', escape=False)\n                    response.write(A(str(T(\'New Record\')),_href=URL(\'insert\',args=[db,table]),_class="btn btn-primary"))\n                    response.write(\'\\r\\n            </td>\\r\\n          </tr>\\r\\n          \', escape=False)\n                    pass\n                response.write(\'\\r\\n          \', escape=False)\n                pass\n            response.write(\'\\r\\n        </table>\\r\\n      </div>\\r\\n      <div class="tab-pane" id="hooks">\\r\\n      \', escape=False)\n            response.write(LOAD(\'appadmin\', \'hooks\', ajax=True))\n            response.write(\'\\r\\n      </div>\\r\\n  </div>\\r\\n\', escape=False)\n        elif request.function==\'select\':\n            response.write(\'\\r\\n  <h2>\', escape=False)\n            response.write(XML(str(T("Database %s select"))%A(request.args[0],_href=URL(\'index\'))))\n            response.write(\'\\r\\n  </h2>\\r\\n  \', escape=False)\n            if tb:\n                response.write(\'\\r\\n  <h3>\', escape=False)\n                response.write(T(\'Traceback\'))\n                response.write(\'</h3>\\r\\n  <pre>\\r\\n    \', escape=False)\n                response.write(tb)\n                response.write(\'\\r\\n  </pre>\\r\\n  \', escape=False)\n                pass\n            response.write(\'\\r\\n  \', escape=False)\n            if table:\n                response.write(\'\\r\\n  \', escape=False)\n                response.write(A(str(T(\'New Record\')),_href=URL(\'insert\',args=[request.args[0],table]),_class="btn btn-primary", _role="button"))\n                response.write(\'<br/><br/>\\r\\n  <hr />\\r\\n    <h3>\', escape=False)\n                response.write(T("Rows in Table"))\n                response.write(\'</h3><br/>\\r\\n   \', escape=False)\n            else:\n                response.write(\'\\r\\n    <h3>\', escape=False)\n                response.write(T("Rows selected"))\n                response.write(\'</h3><br/>\\r\\n   \', escape=False)\n                pass\n            response.write(\'\\r\\n   \', escape=False)\n            response.write(form)\n            response.write(\'\\r\\n   <p class="text-muted">\', escape=False)\n            response.write(T(\'The "query" is a condition like "db.table1.field1==\\\'value\\\'". Something like "db.table1.field1==db.table2.field2" results in a SQL JOIN.\'))\n            response.write(\'<br/>\\r\\n      \', escape=False)\n            response.write(T(\'Use (...)&(...) for AND, (...)|(...) for OR, and ~(...)  for NOT to build more complex queries.\'))\n            response.write(\'<br/>\\r\\n      \', escape=False)\n            response.write(T(\'"update" is an optional expression like "field1=\\\'newvalue\\\'". You cannot update or delete the results of a JOIN\'))\n            response.write(\'</p>\\r\\n    <br/><br/>\\r\\n    <h4>\', escape=False)\n            response.write(T("%s selected", nrows))\n            response.write(\'</h4>\\r\\n    \', escape=False)\n            if start>0:\n                response.write(A(T(\'previous %s rows\') % step,_href=URL(\'select\',args=request.args[0],vars=dict(start=start-step)),_class="btn btn-primary"))\n                pass\n            response.write(\'\\r\\n    \', escape=False)\n            if stop<nrows:\n                response.write(A(T(\'next %s rows\') % step,_href=URL(\'select\',args=request.args[0],vars=dict(start=start+step)),_class="btn btn-primary"))\n                pass\n            response.write(\'\\r\\n    \', escape=False)\n            if rows:\n                response.write(\'\\r\\n       <div style="overflow:auto; width:80%;">\\r\\n       \', escape=False)\n                linkto = lambda f, t, r: URL(\'update\', args=[request.args[0], r, f]) if f else "#"\n                response.write(\'\\r\\n       \', escape=False)\n                upload=URL(\'download\',args=request.args[0])\n                response.write(\'\\r\\n       \', escape=False)\n                response.write(SQLTABLE(rows,linkto,upload,orderby=True,_class=\'table table-striped table-bordered sortable\'))\n                response.write(\'\\r\\n       </div>\\r\\n    \', escape=False)\n                pass\n            response.write(\'\\r\\n    <br/><br/>\\r\\n    <hr />\\r\\n    <h3>\', escape=False)\n            response.write(T("Import/Export"))\n            response.write(\'</h3><br/>\\r\\n    <a href="\', escape=False)\n            response.write(URL(\'csv\',args=request.args[0],vars=dict(query=query)))\n            response.write(\'" class="btn btn-primary">\', escape=False)\n            response.write(T("export as csv file"))\n            response.write(\'</a>\\r\\n  \', escape=False)\n            response.write(formcsv or \'\')\n            response.write(\'\\r\\n\\r\\n\', escape=False)\n        elif request.function==\'insert\':\n            response.write(\'\\r\\n  <h2>\', escape=False)\n            response.write(T("Database"))\n            response.write(\' \', escape=False)\n            response.write(A(request.args[0],_href=URL(\'index\')))\n            response.write(\'\\r\\n    \', escape=False)\n            if hasattr(table,\'_primarykey\'):\n                response.write(\'\\r\\n      \', escape=False)\n                fieldname=table._primarykey[0]\n                response.write(\'\\r\\n      \', escape=False)\n                dbname=request.args[0]\n                response.write(\'\\r\\n      \', escape=False)\n                tablename=request.args[1]\n                response.write(\'\\r\\n      \', escape=False)\n                cond = table[fieldname].type in [\'string\',\'text\'] and \'!=""\' or \'>0\'\n                response.write(\'\\r\\n      \', escape=False)\n                response.write(T("Table"))\n                response.write(\' \', escape=False)\n                response.write(A(tablename,_href=URL(\'select\',args=dbname,vars=dict(query=\'%s.%s.%s%s\'%(dbname,tablename,fieldname,cond)))))\n                response.write(\'\\r\\n    \', escape=False)\n            else:\n                response.write(\'\\r\\n      \', escape=False)\n                response.write(T("Table"))\n                response.write(\' \', escape=False)\n                response.write(A(request.args[1],_href=URL(\'select\',args=request.args[0],vars=dict(query=\'%s.%s.id>0\'%tuple(request.args[:2])))))\n                response.write(\'\\r\\n    \', escape=False)\n                pass\n            response.write(\'\\r\\n  </h2>\\r\\n  <h3>\', escape=False)\n            response.write(T("New Record"))\n            response.write(\'</h3><br/>\\r\\n  \', escape=False)\n            response.write(form)\n            response.write(\'\\r\\n\', escape=False)\n        elif request.function==\'update\':\n            response.write(\'\\r\\n  <h2>\', escape=False)\n            response.write(T("Database"))\n            response.write(\' \', escape=False)\n            response.write(A(request.args[0],_href=URL(\'index\')))\n            response.write(\'\\r\\n    \', escape=False)\n            if hasattr(table,\'_primarykey\'):\n                response.write(\'\\r\\n      \', escape=False)\n                fieldname=request.vars.keys()[0]\n                response.write(\'\\r\\n      \', escape=False)\n                dbname=request.args[0]\n                response.write(\'\\r\\n      \', escape=False)\n                tablename=request.args[1]\n                response.write(\'\\r\\n      \', escape=False)\n                cond = table[fieldname].type in [\'string\',\'text\'] and \'!=""\' or \'>0\'\n                response.write(\'\\r\\n      \', escape=False)\n                response.write(T("Table"))\n                response.write(\' \', escape=False)\n                response.write(A(tablename,_href=URL(\'select\',args=dbname,vars=dict(query=\'%s.%s.%s%s\'%(dbname,tablename,fieldname,cond)))))\n                response.write(\'\\r\\n      \', escape=False)\n                response.write(T("Record"))\n                response.write(\' \', escape=False)\n                response.write(A(\'%s=%s\'%request.vars.items()[0],_href=URL(\'update\',args=request.args[:2],vars=request.vars)))\n                response.write(\'\\r\\n    \', escape=False)\n            else:\n                response.write(\'\\r\\n      \', escape=False)\n                response.write(T("Table"))\n                response.write(\' \', escape=False)\n                response.write(A(request.args[1],_href=URL(\'select\',args=request.args[0],vars=dict(query=\'%s.%s.id>0\'%tuple(request.args[:2])))))\n                response.write(\'\\r\\n      \', escape=False)\n                response.write(T("Record id"))\n                response.write(\' \', escape=False)\n                response.write(A(request.args[2],_href=URL(\'update\',args=request.args[:3])))\n                response.write(\'\\r\\n    \', escape=False)\n                pass\n            response.write(\'\\r\\n  </h2>\\r\\n  <h3>\', escape=False)\n            response.write(T("Edit current record"))\n            response.write(\'</h3><br/><br/>\', escape=False)\n            response.write(form)\n            response.write(\'\\r\\n\\r\\n\', escape=False)\n        elif request.function==\'state\':\n            response.write(\'\\r\\n  <h2>\', escape=False)\n            response.write(T("Internal State"))\n            response.write(\'</h2>\\r\\n  <h3>\', escape=False)\n            response.write(T("Current request"))\n            response.write(\'</h3>\\r\\n  \', escape=False)\n            response.write(BEAUTIFY(request))\n            response.write(\'\\r\\n  <br/><h3>\', escape=False)\n            response.write(T("Current response"))\n            response.write(\'</h3>\\r\\n  \', escape=False)\n            response.write(BEAUTIFY(response))\n            response.write(\'\\r\\n  <br/><h3>\', escape=False)\n            response.write(T("Current session"))\n            response.write(\'</h3>\\r\\n  \', escape=False)\n            response.write(BEAUTIFY(session))\n            response.write(\'\\r\\n\\r\\n\\r\\n\', escape=False)\n        elif request.function == \'ccache\':\n            response.write(\'\\r\\n<h2>\', escape=False)\n            T("Cache")\n            response.write(\'</h2>\\r\\n<div class="list">\\r\\n\\r\\n  <div class="list-header">\\r\\n    <h3>\', escape=False)\n            T("Statistics")\n            response.write(\'</h3>\\r\\n  </div>\\r\\n\\r\\n  <div class="content">\\r\\n    <h4>\', escape=False)\n            response.write(T("Overview"))\n            response.write(\'</h4>\\r\\n    <p>\', escape=False)\n            response.write(T.M("Number of entries: **%s**", total[\'entries\']))\n            response.write(\'</p>\\r\\n    \', escape=False)\n            if total[\'entries\'] > 0:\n                response.write(\'\\r\\n    <p>\', escape=False)\n                response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses)})",\n                dict( ratio=total[\'ratio\'], hits=total[\'hits\'], misses=total[\'misses\'])))\n                response.write(\'\\r\\n    </p>\\r\\n    <p>\\r\\n      \', escape=False)\n                response.write(T("Size of cache:"))\n                response.write(\'\\r\\n      \', escape=False)\n                if object_stats:\n                    response.write(\'\\r\\n        \', escape=False)\n                    response.write(T.M("**%(items)s** %%{item(items)}, **%(bytes)s** %%{byte(bytes)}", dict(items=total[\'objects\'], bytes=total[\'bytes\'])))\n                    response.write(\'\\r\\n        \', escape=False)\n                    if total[\'bytes\'] > 524287:\n                        response.write(\'\\r\\n          \', escape=False)\n                        response.write(T.M("(**%.0d MB**)", total[\'bytes\'] / 1048576))\n                        response.write(\'\\r\\n        \', escape=False)\n                        pass\n                    response.write(\'\\r\\n      \', escape=False)\n                else:\n                    response.write(\'\\r\\n        \', escape=False)\n                    response.write(T.M("**not available** (requires the Python [[Pympler https://pypi.python.org/pypi/Pympler popup]] library)"))\n                    response.write(\'\\r\\n      \', escape=False)\n                    pass\n                response.write(\'\\r\\n    </p>\\r\\n    <p>\\r\\n      \', escape=False)\n                response.write(T.M("Cache contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n                dict(hours=total[\'oldest\'][0], min=total[\'oldest\'][1], sec=total[\'oldest\'][2])))\n                response.write(\'\\r\\n    </p>\\r\\n    \', escape=False)\n                response.write(BUTTON(T(\'Cache Keys\'), _onclick=\'jQuery("#all_keys").toggle().toggleClass( "w2p_hidden" );\'))\n                response.write(\'\\r\\n    <div class="w2p_hidden" id="all_keys">\\r\\n      \', escape=False)\n                response.write(total[\'keys\'])\n                response.write(\'\\r\\n    </div>\\r\\n    <br />\\r\\n    \', escape=False)\n                pass\n            response.write(\'\\r\\n\\r\\n    <h4>\', escape=False)\n            response.write(T("RAM"))\n            response.write(\'</h4>\\r\\n    <p>\', escape=False)\n            response.write(T.M("Number of entries: **%s**", ram[\'entries\']))\n            response.write(\'</p>\\r\\n    \', escape=False)\n            if ram[\'entries\'] > 0:\n                response.write(\'\\r\\n    <p>\', escape=False)\n                response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses)})",\n                dict( ratio=ram[\'ratio\'], hits=ram[\'hits\'], misses=ram[\'misses\'])))\n                response.write(\'\\r\\n    </p>\\r\\n    <p>\\r\\n      \', escape=False)\n                response.write(T("Size of cache:"))\n                response.write(\'\\r\\n      \', escape=False)\n                if object_stats:\n                    response.write(\'\\r\\n        \', escape=False)\n                    response.write(T.M("**%(items)s** items, **%(bytes)s** %%{byte(bytes)}", dict(items=ram[\'objects\'], bytes=ram[\'bytes\'])))\n                    response.write(\'\\r\\n        \', escape=False)\n                    if ram[\'bytes\'] > 524287:\n                        response.write(\'\\r\\n          \', escape=False)\n                        response.write(T.M("(**%.0d MB**)", ram[\'bytes\'] / 10485576))\n                        response.write(\'\\r\\n        \', escape=False)\n                        pass\n                    response.write(\'\\r\\n      \', escape=False)\n                else:\n                    response.write(\'\\r\\n        \', escape=False)\n                    response.write(T.M("``**not available**``:red (requires the Python [[Pympler https://pypi.python.org/pypi/Pympler popup]] library)"))\n                    response.write(\'\\r\\n      \', escape=False)\n                    pass\n                response.write(\'\\r\\n    </p>\\r\\n    <p>\\r\\n      \', escape=False)\n                response.write(T.M("RAM contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n                dict(hours=ram[\'oldest\'][0], min=ram[\'oldest\'][1], sec=ram[\'oldest\'][2])))\n                response.write(\'\\r\\n    </p>\\r\\n    \', escape=False)\n                response.write(BUTTON(T(\'RAM Cache Keys\'), _onclick=\'jQuery("#ram_keys").toggle().toggleClass( "w2p_hidden" );\'))\n                response.write(\'\\r\\n    <div class="w2p_hidden" id="ram_keys">\\r\\n      \', escape=False)\n                response.write(ram[\'keys\'])\n                response.write(\'\\r\\n    </div>\\r\\n    <br />\\r\\n    \', escape=False)\n                pass\n            response.write(\'\\r\\n\\r\\n    <h4>\', escape=False)\n            response.write(T("DISK"))\n            response.write(\'</h4>\\r\\n    <p>\', escape=False)\n            response.write(T.M("Number of entries: **%s**", disk[\'entries\']))\n            response.write(\'</p>\\r\\n    \', escape=False)\n            if disk[\'entries\'] > 0:\n                response.write(\'\\r\\n      <p>\\r\\n      \', escape=False)\n                response.write(T.M("Hit Ratio: **%(ratio)s%%** (**%(hits)s** %%{hit(hits)} and **%(misses)s** %%{miss(misses)})",\n                dict(ratio=disk[\'ratio\'], hits=disk[\'hits\'], misses=disk[\'misses\'])))\n                response.write(\'\\r\\n      </p>\\r\\n      <p>\\r\\n      \', escape=False)\n                response.write(T("Size of cache:"))\n                response.write(\'\\r\\n      \', escape=False)\n                if object_stats:\n                    response.write(\'\\r\\n        \', escape=False)\n                    response.write(T.M("**%(items)s** %%{item(items)}, **%(bytes)s** %%{byte(bytes)}", dict( items=disk[\'objects\'], bytes=disk[\'bytes\'])))\n                    response.write(\'\\r\\n        \', escape=False)\n                    if disk[\'bytes\'] > 524287:\n                        response.write(\'\\r\\n          \', escape=False)\n                        response.write(T.M("(**%.0d MB**)", disk[\'bytes\'] / 1048576))\n                        response.write(\'\\r\\n        \', escape=False)\n                        pass\n                    response.write(\'\\r\\n      \', escape=False)\n                else:\n                    response.write(\'\\r\\n        \', escape=False)\n                    response.write(T.M("``**not available**``:red (requires the Python [[Pympler https://pypi.python.org/pypi/Pympler popup]] library)"))\n                    response.write(\'\\r\\n      \', escape=False)\n                    pass\n                response.write(\'\\r\\n      </p>\\r\\n      <p>\\r\\n      \', escape=False)\n                response.write(T.M("DISK contains items up to **%(hours)02d** %%{hour(hours)} **%(min)02d** %%{minute(min)} **%(sec)02d** %%{second(sec)} old.",\n                dict(hours=disk[\'oldest\'][0], min=disk[\'oldest\'][1], sec=disk[\'oldest\'][2])))\n                response.write(\'\\r\\n      </p>\\r\\n      \', escape=False)\n                response.write(BUTTON(T(\'Disk Cache Keys\'), _onclick=\'jQuery("#disk_keys").toggle().toggleClass( "w2p_hidden" );\'))\n                response.write(\'\\r\\n      <div class="w2p_hidden" id="disk_keys">\\r\\n      \', escape=False)\n                response.write(disk[\'keys\'])\n                response.write(\'\\r\\n      </div>\\r\\n      <br />\\r\\n    \', escape=False)\n                pass\n            response.write(\'\\r\\n  </div>\\r\\n\\r\\n  <div class="list-header">\\r\\n    <h3>\', escape=False)\n            response.write(T("Manage Cache"))\n            response.write(\'</h3>\\r\\n  </div>\\r\\n\\r\\n  <div class="content">\\r\\n    <p>\\r\\n      \', escape=False)\n            response.write(form)\n            response.write(\'\\r\\n    </p>\\r\\n  </div>\\r\\n</div>\\r\\n<div class="clear"></div>\\r\\n\', escape=False)\n            pass\n        response.write(\'\\r\\n\\r\\n\', escape=False)\n        if request.function==\'d3_graph_model\':\n            response.write(\'\\r\\n<h2>\', escape=False)\n            response.write(T("Graph Model"))\n            response.write(\'</h2>\\r\\n  \', escape=False)\n            if not databases:\n                response.write(\'  \\r\\n    \', escape=False)\n                response.write(T("No databases in this application"))\n                response.write(\'\\r\\n  \', escape=False)\n            else:\n                response.write(\'    \\r\\n    <div id="vis"></div>\\r\\n      <link rel="stylesheet" href="\', escape=False)\n                response.write(URL(\'admin\',\'static\',\'css/d3_graph.css\'))\n                response.write(\'"/>\\r\\n      <script>\\r\\n        // Define the d3 input data\\r\\n        \', escape=False)\n                from gluon.serializers import json\n                response.write(\'\\r\\n        var nodes = \', escape=False)\n                response.write(XML(json(nodes)))\n                response.write(\';\\r\\n        var links = \', escape=False)\n                response.write(XML(json(links)))\n                response.write(\';\\r\\n        d3_graph();\\r\\n      </script>\\r\\n  \', escape=False)\n                pass\n            response.write(\'\\r\\n\', escape=False)\n            pass\n        response.write(\'  \\r\\n\\r\\n\', escape=False)\n        if request.function == \'manage\':\n            response.write(\'\\r\\n<h2>\', escape=False)\n            response.write(heading)\n            response.write(\'</h2>\\r\\n<ul class="nav nav-tabs">\\r\\n  \', escape=False)\n            for k, tablename in enumerate(tablenames):\n                response.write(\'\\r\\n  <li\', escape=False)\n                response.write(XML(\' class="active"\') if k == 0 else \'\')\n                response.write(\'>\\r\\n    <a href="#table-\', escape=False)\n                response.write(tablename)\n                response.write(\'" data-toggle="tab">\', escape=False)\n                response.write(labels[k])\n                response.write(\'</a>\\r\\n  </li>\\r\\n  \', escape=False)\n                pass\n            response.write(\'\\r\\n</ul>\\r\\n\\r\\n<div class="tab-content">\\r\\n  \', escape=False)\n            for k, tablename in enumerate(tablenames):\n                response.write(\'\\r\\n  <div class="tab-pane\', escape=False)\n                response.write(XML(\' active\') if k == 0 else \'\')\n                response.write(\'" id="table-\', escape=False)\n                response.write(tablename)\n                response.write(\'">\\r\\n    \', escape=False)\n                response.write(LOAD(f=\'manage.load\', args=[request.args(0), k], ajax=True))\n                response.write(\'\\r\\n  </div>\\r\\n  \', escape=False)\n                pass\n            response.write(\'\\r\\n</div>\\r\\n\', escape=False)\n            pass\n        response.write(\'\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n\', escape=False)\n        response.write(\'\\r\\n      \', escape=False)\n        response.write(response.toolbar() if response.show_toolbar else \'\')\n        response.write(\'\\r\\n    </div>\\r\\n\\r\\n    \', escape=False)\n        response.write(\' <!-- this is default footer -->\\r\\n    <footer class="footer container-fluid">\\r\\n      <div class="row">\\r\\n        <div class="col-md-12">\\r\\n          <div class="copyright pull-left">\', escape=False)\n        response.write(T(\'Copyright\'))\n        response.write(\' &#169; \', escape=False)\n        response.write(request.now.year)\n        response.write(\'</div>\\r\\n          <div id="poweredBy" class="pull-right">\\r\\n            \', escape=False)\n        response.write(T(\'Powered by\'))\n        response.write(\'\\r\\n            <a href="http://www.web2py.com/">web2py</a>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </footer>\\r\\n    \', escape=False)\n        response.write(\'\\r\\n    <!-- The javascript =============================== -->\\r\\n    <script src="\', escape=False)\n        response.write(URL(\'static\',\'js/bootstrap.bundle.min.js\'))\n        response.write(\'"></script>\\r\\n    <script src="\', escape=False)\n        response.write(URL(\'static\',\'js/web2py-bootstrap4.js\'))\n        response.write(\'"></script>\\r\\n    \', escape=False)\n        response.write(\'\\r\\n    \', escape=False)\n        if response.google_analytics_id:\n            response.write(\'\\r\\n    <!-- Analytics ==================================== -->\\r\\n    <script src="\', escape=False)\n            response.write(URL(\'static\',\'js/analytics.min.js\'))\n            response.write(\'"></script>\\r\\n    <script type="text/javascript">\\r\\n      analytics.initialize({\\r\\n      \\\'Google Analytics\\\':{trackingId:\\\'\', escape=False)\n            response.write(response.google_analytics_id)\n            response.write("\'}\\r\\n      });\\r\\n    </script>\\r\\n    ", escape=False)\n            pass\n        response.write(\'\\r\\n  </body>\\r\\n</html>\\r\\n\', escape=False)'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__module__'
p12
S"'gluon.rocket'"
p13
sS'__getslice__'
p14
S"<method-wrapper '__getslice__' of SocketTimeout object>"
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of SocketTimeout object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of SocketTimeout object>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of SocketTimeout object>'
p23
sS'__weakref__'
p24
S'None'
p25
sS'message'
p26
S"'Socket timed out before request.'"
p27
sS'__init__'
p28
S"<method-wrapper '__init__' of SocketTimeout object>"
p29
sS'__setattr__'
p30
S"<method-wrapper '__setattr__' of SocketTimeout object>"
p31
sS'__reduce_ex__'
p32
S'<built-in method __reduce_ex__ of SocketTimeout object>'
p33
sS'__new__'
p34
S'<built-in method __new__ of type object>'
p35
sS'__format__'
p36
S'<built-in method __format__ of SocketTimeout object>'
p37
sS'__class__'
p38
S"<class 'gluon.rocket.SocketTimeout'>"
p39
sS'__doc__'
p40
S"'Exception for when a socket times out between requests.'"
p41
sS'__getitem__'
p42
S"<method-wrapper '__getitem__' of SocketTimeout object>"
p43
sS'__setstate__'
p44
S'<built-in method __setstate__ of SocketTimeout object>'
p45
sS'__getattribute__'
p46
S"<method-wrapper '__getattribute__' of SocketTimeout object>"
p47
sS'args'
p48
S"('Socket timed out before request.',)"
p49
sS'__subclasshook__'
p50
S'<built-in method __subclasshook__ of type object>'
p51
sS'__unicode__'
p52
S'<built-in method __unicode__ of SocketTimeout object>'
p53
sS'__delattr__'
p54
S"<method-wrapper '__delattr__' of SocketTimeout object>"
p55
sS'__repr__'
p56
S"<method-wrapper '__repr__' of SocketTimeout object>"
p57
sS'__hash__'
p58
S"<method-wrapper '__hash__' of SocketTimeout object>"
p59
ssS'evalue'
p60
S'Socket timed out before request.'
p61
sS'frames'
p62
(lp63
(dp64
S'file'
p65
S'E:\\study\\dasanxia\\database\\web2py_win\\web2py\\gluon\\rocket.py'
p66
sS'dump'
p67
(dp68
S'self'
p69
S'<WSGIWorker(Thread-9, started daemon 7032)>'
p70
sS'conn'
p71
S'<gluon.rocket.Connection object>'
p72
sS'self.run_app'
p73
S'<bound method WSGIWorker.run_app of <WSGIWorker(Thread-9, started daemon 7032)>>'
p74
ssS'lnum'
p75
I1288
sS'lines'
p76
(dp77
I1283
S'            # Enter connection serve loop'
p78
sI1284
S'            while True:'
p79
sI1285
S'                if __debug__:'
p80
sI1286
S"                    self.err_log.debug('Serving a request')"
p81
sI1287
S'                try:'
p82
sI1288
S'                    self.run_app(conn)'
p83
sI1289
S'                except:'
p84
sI1290
S'                    exc = sys.exc_info()'
p85
sI1291
S'                    handled = self._handleError(*exc)'
p86
sI1292
S'                    if handled:'
p87
ssS'call'
p88
S'(self=<WSGIWorker(Thread-9, started daemon 7032)>)'
p89
sS'func'
p90
S'run'
p91
sa(dp92
g65
S'E:\\study\\dasanxia\\database\\web2py_win\\web2py\\gluon\\rocket.py'
p93
sg67
(dp94
S'self'
p95
S'<WSGIWorker(Thread-9, started daemon 7032)>'
p96
sS'self.environ'
p97
S"{'HTTP_ACCEPT': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8', 'HTTP_ACCEPT_ENCODING': 'gzip, deflate, br', 'HTTP_ACCEPT_LANGUAGE': 'zh-CN,zh;q=0.9,en;q=0.8', 'HTTP_CACHE_CONTROL': 'max-age=0', 'HTTP_CONNECTION': 'keep-alive', 'HTTP_COOKIE': 'bdshare_firstime=1555400542012; Hm_lvt_6ce2e2fcb...pp=127.0.0.1-11fdf502-1c98-469f-b399-5e107ace33a8', 'HTTP_HOST': '127.0.0.1:8000', 'HTTP_REFERER': 'http://127.0.0.1:8000/myapp', 'HTTP_UPGRADE_INSECURE_REQUESTS': '1', 'HTTP_USER_AGENT': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit...L, like Gecko) Chrome/72.0.3626.121 Safari/537.36', ...}"
p98
sS'sock_file'
p99
S'<socket._fileobject object>'
p100
sS'environ'
p101
S'undefined'
p102
sS'self.build_environ'
p103
S'<bound method WSGIWorker.build_environ of <WSGIWorker(Thread-9, started daemon 7032)>>'
p104
sS'conn'
p105
S'<gluon.rocket.Connection object>'
p106
ssg75
I1781
sg76
(dp107
I1776
S'        else:'
p108
sI1777
S'            sock_file = conn.makefile(BUF_SIZE)'
p109
sI1778
S''
sI1779
S'        try:'
p110
sI1780
S'            # Read the headers and build our WSGI environment'
p111
sI1781
S'            self.environ = environ = self.build_environ(sock_file, conn)'
p112
sI1782
S''
sI1783
S'            # Handle 100 Continue'
p113
sI1784
S"            if environ.get('HTTP_EXPECT', '') == '100-continue':"
p114
sI1785
S"                res = environ['SERVER_PROTOCOL'] + ' 100 Continue\\r\\n\\r\\n'"
p115
ssg88
S'(self=<WSGIWorker(Thread-9, started daemon 7032)>, conn=<gluon.rocket.Connection object>)'
p116
sg90
S'run_app'
p117
sa(dp118
g65
S'E:\\study\\dasanxia\\database\\web2py_win\\web2py\\gluon\\rocket.py'
p119
sg67
(dp120
S'sock_file'
p121
S'<socket._fileobject object>'
p122
sS'self.read_request_line'
p123
S'<bound method WSGIWorker.read_request_line of <WSGIWorker(Thread-9, started daemon 7032)>>'
p124
sS'self'
p125
S'<WSGIWorker(Thread-9, started daemon 7032)>'
p126
sS'request'
p127
g102
ssg75
I1601
sg76
(dp128
I1600
S'        # Grab the request line'
p129
sI1601
S'        request = self.read_request_line(sock_file)'
p130
sI1602
S''
sI1603
S'        # Copy the Base Environment'
p131
sI1604
S'        environ = self.base_environ.copy()'
p132
sI1605
S''
sI1596
S'                                      "wsgiorg.futures": executor.futures})'
p133
sI1597
S''
sI1598
S'    def build_environ(self, sock_file, conn):'
p134
sI1599
S'        """ Build the execution environment. """'
p135
ssg88
S'(self=<WSGIWorker(Thread-9, started daemon 7032)>, sock_file=<socket._fileobject object>, conn=<gluon.rocket.Connection object>)'
p136
sg90
S'build_environ'
p137
sa(dp138
g65
S'E:\\study\\dasanxia\\database\\web2py_win\\web2py\\gluon\\rocket.py'
p139
sg67
(dp140
S'global SocketTimeout'
p141
S"<class 'gluon.rocket.SocketTimeout'>"
p142
ssg75
I1352
sg76
(dp143
I1347
S''
sI1348
S'                d = sock_file.readline()'
p144
sI1349
S'                if PY3K:'
p145
sI1350
S"                    d = d.decode('ISO-8859-1')"
p146
sI1351
S'        except socket.timeout:'
p147
sI1352
S"            raise SocketTimeout('Socket timed out before request.')"
p148
sI1353
S'        except TypeError:'
p149
sI1354
S'            raise SocketClosed('
p150
sI1355
S"                'SSL bug caused closure of socket.  See '"
p151
sI1356
S'                \'"https://groups.google.com/d/topic/web2py/P_Gw0JxWzCs".\')'
p152
ssg88
S'(self=<WSGIWorker(Thread-9, started daemon 7032)>, sock_file=<socket._fileobject object>)'
p153
sg90
S'read_request_line'
p154
sasS'pyver'
p155
S'Python 2.7.9: E:\\study\\dasanxia\\database\\web2py_win\\web2py\\web2py.exe (prefix: )'
p156
sS'etype'
p157
S"<class 'gluon.rocket.SocketTimeout'>"
p158
sS'date'
p159
S'Mon May 20 16:19:48 2019'
p160
sS'locals'
p161
(dp162
S'sock_file'
p163
S'<socket._fileobject object>'
p164
sS'self'
p165
S'<WSGIWorker(Thread-9, started daemon 7032)>'
p166
sssS'traceback'
p167
S'Traceback (most recent call last):\n  File "E:\\study\\dasanxia\\database\\web2py_win\\web2py\\gluon\\rocket.py", line 1288, in run\n    self.run_app(conn)\n  File "E:\\study\\dasanxia\\database\\web2py_win\\web2py\\gluon\\rocket.py", line 1781, in run_app\n    self.environ = environ = self.build_environ(sock_file, conn)\n  File "E:\\study\\dasanxia\\database\\web2py_win\\web2py\\gluon\\rocket.py", line 1601, in build_environ\n    request = self.read_request_line(sock_file)\n  File "E:\\study\\dasanxia\\database\\web2py_win\\web2py\\gluon\\rocket.py", line 1352, in read_request_line\n    raise SocketTimeout(\'Socket timed out before request.\')\nSocketTimeout: Socket timed out before request.\n'
p168
s.